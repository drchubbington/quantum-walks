//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"CircleTest\",\"Name\":\"Mutation\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\BWSI\\\\quantum-walks\\\\Q#\\\\QuantumWalks\\\\circleTest\\\\dummy.qs\",\"Position\":{\"Item1\":8,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":19}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"coin\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":20},\"Item2\":{\"Line\":1,\"Column\":24}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"state\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":33},\"Item2\":{\"Line\":1,\"Column\":38}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Qubit\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"CircleTest\",\"Name\":\"Mutation\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\BWSI\\\\quantum-walks\\\\Q#\\\\QuantumWalks\\\\circleTest\\\\dummy.qs\",\"Position\":{\"Item1\":8,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"CircleTest\",\"Name\":\"Increment\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\BWSI\\\\quantum-walks\\\\Q#\\\\QuantumWalks\\\\circleTest\\\\dummy.qs\",\"Position\":{\"Item1\":17,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":21},\"Item2\":{\"Line\":1,\"Column\":29}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"CircleTest\",\"Name\":\"Increment\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\BWSI\\\\quantum-walks\\\\Q#\\\\QuantumWalks\\\\circleTest\\\\dummy.qs\",\"Position\":{\"Item1\":17,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"CircleTest\",\"Name\":\"Increment\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\BWSI\\\\quantum-walks\\\\Q#\\\\QuantumWalks\\\\circleTest\\\\dummy.qs\",\"Position\":{\"Item1\":17,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":50},\"Item2\":{\"Line\":1,\"Column\":59}},\"Documentation\":[\"automatically generated QsAdjoint specialization for CircleTest.Increment\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"CircleTest\",\"Name\":\"Increment\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\BWSI\\\\quantum-walks\\\\Q#\\\\QuantumWalks\\\\circleTest\\\\dummy.qs\",\"Position\":{\"Item1\":17,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":50},\"Item2\":{\"Line\":1,\"Column\":59}},\"Documentation\":[\"automatically generated QsControlled specialization for CircleTest.Increment\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"CircleTest\",\"Name\":\"Increment\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\BWSI\\\\quantum-walks\\\\Q#\\\\QuantumWalks\\\\circleTest\\\\dummy.qs\",\"Position\":{\"Item1\":17,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":50},\"Item2\":{\"Line\":1,\"Column\":59}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for CircleTest.Increment\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"CircleTest\",\"Name\":\"Decrement\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\BWSI\\\\quantum-walks\\\\Q#\\\\QuantumWalks\\\\circleTest\\\\dummy.qs\",\"Position\":{\"Item1\":24,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":21},\"Item2\":{\"Line\":1,\"Column\":29}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"CircleTest\",\"Name\":\"Decrement\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\BWSI\\\\quantum-walks\\\\Q#\\\\QuantumWalks\\\\circleTest\\\\dummy.qs\",\"Position\":{\"Item1\":24,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"CircleTest\",\"Name\":\"Decrement\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\BWSI\\\\quantum-walks\\\\Q#\\\\QuantumWalks\\\\circleTest\\\\dummy.qs\",\"Position\":{\"Item1\":24,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":50},\"Item2\":{\"Line\":1,\"Column\":59}},\"Documentation\":[\"automatically generated QsAdjoint specialization for CircleTest.Decrement\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"CircleTest\",\"Name\":\"Decrement\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\BWSI\\\\quantum-walks\\\\Q#\\\\QuantumWalks\\\\circleTest\\\\dummy.qs\",\"Position\":{\"Item1\":24,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":50},\"Item2\":{\"Line\":1,\"Column\":59}},\"Documentation\":[\"automatically generated QsControlled specialization for CircleTest.Decrement\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"CircleTest\",\"Name\":\"Decrement\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\BWSI\\\\quantum-walks\\\\Q#\\\\QuantumWalks\\\\circleTest\\\\dummy.qs\",\"Position\":{\"Item1\":24,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":50},\"Item2\":{\"Line\":1,\"Column\":59}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for CircleTest.Decrement\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"CircleTest\",\"Name\":\"Flip\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\BWSI\\\\quantum-walks\\\\Q#\\\\QuantumWalks\\\\circleTest\\\\dummy.qs\",\"Position\":{\"Item1\":28,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":15}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"coin\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":16},\"Item2\":{\"Line\":1,\"Column\":20}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Qubit\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"CircleTest\",\"Name\":\"Flip\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\BWSI\\\\quantum-walks\\\\Q#\\\\QuantumWalks\\\\circleTest\\\\dummy.qs\",\"Position\":{\"Item1\":28,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":15}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"CircleTest\",\"Name\":\"LoopedWalk\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\BWSI\\\\quantum-walks\\\\Q#\\\\QuantumWalks\\\\circleTest\\\\dummy.qs\",\"Position\":{\"Item1\":32,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"N\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":23}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"iterations\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":30},\"Item2\":{\"Line\":1,\"Column\":40}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"CircleTest\",\"Name\":\"LoopedWalk\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\BWSI\\\\quantum-walks\\\\Q#\\\\QuantumWalks\\\\circleTest\\\\dummy.qs\",\"Position\":{\"Item1\":32,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"CircleTest\",\"Name\":\"LeftShifts\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\BWSI\\\\quantum-walks\\\\Q#\\\\QuantumWalks\\\\circleTest\\\\dummy.qs\",\"Position\":{\"Item1\":52,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"N\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":23}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"shifts\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":30},\"Item2\":{\"Line\":1,\"Column\":36}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"CircleTest\",\"Name\":\"LeftShifts\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\BWSI\\\\quantum-walks\\\\Q#\\\\QuantumWalks\\\\circleTest\\\\dummy.qs\",\"Position\":{\"Item1\":52,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"CircleTest\",\"Name\":\"RightShifts\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\BWSI\\\\quantum-walks\\\\Q#\\\\QuantumWalks\\\\circleTest\\\\dummy.qs\",\"Position\":{\"Item1\":65,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"N\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":23},\"Item2\":{\"Line\":1,\"Column\":24}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"shifts\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":31},\"Item2\":{\"Line\":1,\"Column\":37}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"CircleTest\",\"Name\":\"RightShifts\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\BWSI\\\\quantum-walks\\\\Q#\\\\QuantumWalks\\\\circleTest\\\\dummy.qs\",\"Position\":{\"Item1\":65,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"Documentation\":[]}")]
#line hidden
namespace CircleTest
{
    [SourceLocation("D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs", OperationFunctor.Body, 9, 18)]
    public partial class Mutation : Operation<(Qubit,IQArray<Qubit>), QVoid>, ICallable
    {
        public Mutation(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Qubit,IQArray<Qubit>)>, IApplyData
        {
            public In((Qubit,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "Mutation";
        String ICallable.FullName => "CircleTest.Mutation";
        protected ICallable<Qubit, QVoid> Flip__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Increment__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Decrement__
        {
            get;
            set;
        }

        public override Func<(Qubit,IQArray<Qubit>), QVoid> __Body__ => (__in__) =>
        {
            var (coin,state) = __in__;
#line 10 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
            Flip__.Apply(coin);
#line 11 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
            Increment__.Controlled.Apply((new QArray<Qubit>(coin), state));
#line 12 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(coin);
#line 13 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
            Decrement__.Controlled.Apply((new QArray<Qubit>(coin), state));
#line 14 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(coin);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Flip__ = this.__Factory__.Get<ICallable<Qubit, QVoid>>(typeof(Flip));
            this.Increment__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(Increment));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Decrement__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(Decrement));
        }

        public override IApplyData __DataIn__((Qubit,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Qubit coin, IQArray<Qubit> state)
        {
            return __m__.Run<Mutation, (Qubit,IQArray<Qubit>), QVoid>((coin, state));
        }
    }

    [SourceLocation("D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs", OperationFunctor.Body, 18, 25)]
    [SourceLocation("D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs", OperationFunctor.Adjoint, 18, 25)]
    [SourceLocation("D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs", OperationFunctor.Controlled, 18, 25)]
    [SourceLocation("D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs", OperationFunctor.ControlledAdjoint, 18, 25)]
    public partial class Increment : Unitary<IQArray<Qubit>>, ICallable
    {
        public Increment(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Increment";
        String ICallable.FullName => "CircleTest.Increment";
        protected ICallable Length__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse__
        {
            get;
            set;
        }

        public override Func<IQArray<Qubit>, QVoid> __Body__ => (__in__) =>
        {
            var register = __in__;
#line 19 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
            foreach (var i in new QRange((register.Length - 1L), -(1L), 1L))
#line hidden
            {
#line 20 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                Microsoft__Quantum__Intrinsic__X.Controlled.Apply((register.Slice(new QRange((i - 1L), -(1L), 0L)), register[i]));
            }

#line 22 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(register[0L]);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<IQArray<Qubit>, QVoid> __AdjointBody__ => (__in__) =>
        {
            var register = __in__;
#line 18 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
            Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(register[0L]);
#line 18 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
            foreach (var __qsVar0__i__ in RangeReverse__.Apply(new QRange((register.Length - 1L), -(1L), 1L)))
#line hidden
            {
#line 18 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Apply((register.Slice(new QRange((__qsVar0__i__ - 1L), -(1L), 0L)), register[__qsVar0__i__]));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,register) = __in__;
#line 18 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
            foreach (var i in new QRange((register.Length - 1L), -(1L), 1L))
#line hidden
            {
#line 18 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                Microsoft__Quantum__Intrinsic__X.Controlled.Controlled.Apply((__controlQubits__, (register.Slice(new QRange((i - 1L), -(1L), 0L)), register[i])));
            }

#line 18 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Apply((__controlQubits__, register[0L]));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,register) = __in__;
#line 18 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
            Microsoft__Quantum__Intrinsic__X.Adjoint.Controlled.Apply((__controlQubits__, register[0L]));
#line 18 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
            foreach (var __qsVar0__i__ in RangeReverse__.Apply(new QRange((register.Length - 1L), -(1L), 1L)))
#line hidden
            {
#line 18 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (register.Slice(new QRange((__qsVar0__i__ - 1L), -(1L), 0L)), register[__qsVar0__i__])));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.RangeReverse__ = this.__Factory__.Get<ICallable<QRange, QRange>>(typeof(global::Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __DataIn__(IQArray<Qubit> data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> register)
        {
            return __m__.Run<Increment, IQArray<Qubit>, QVoid>(register);
        }
    }

    [SourceLocation("D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs", OperationFunctor.Body, 25, 29)]
    [SourceLocation("D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs", OperationFunctor.Adjoint, 25, 29)]
    [SourceLocation("D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs", OperationFunctor.Controlled, 25, 29)]
    [SourceLocation("D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs", OperationFunctor.ControlledAdjoint, 25, 29)]
    public partial class Decrement : Unitary<IQArray<Qubit>>, ICallable
    {
        public Decrement(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Decrement";
        String ICallable.FullName => "CircleTest.Decrement";
        protected IUnitary<IQArray<Qubit>> Increment__
        {
            get;
            set;
        }

        public override Func<IQArray<Qubit>, QVoid> __Body__ => (__in__) =>
        {
            var register = __in__;
#line 26 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
            Increment__.Adjoint.Apply(register);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<IQArray<Qubit>, QVoid> __AdjointBody__ => (__in__) =>
        {
            var register = __in__;
#line 25 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
            Increment__.Adjoint.Adjoint.Apply(register);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,register) = __in__;
#line 25 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
            Increment__.Adjoint.Controlled.Apply((__controlQubits__, register));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,register) = __in__;
#line 25 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
            Increment__.Adjoint.Adjoint.Controlled.Apply((__controlQubits__, register));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Increment__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(Increment));
        }

        public override IApplyData __DataIn__(IQArray<Qubit> data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> register)
        {
            return __m__.Run<Decrement, IQArray<Qubit>, QVoid>(register);
        }
    }

    [SourceLocation("D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs", OperationFunctor.Body, 29, 33)]
    public partial class Flip : Operation<Qubit, QVoid>, ICallable
    {
        public Flip(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Flip";
        String ICallable.FullName => "CircleTest.Flip";
        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        public override Func<Qubit, QVoid> __Body__ => (__in__) =>
        {
            var coin = __in__;
#line 30 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
            Microsoft__Quantum__Intrinsic__H.Apply(coin);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
        }

        public override IApplyData __DataIn__(Qubit data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Qubit coin)
        {
            return __m__.Run<Flip, Qubit, QVoid>(coin);
        }
    }

    [SourceLocation("D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs", OperationFunctor.Body, 33, 53)]
    public partial class LoopedWalk : Operation<(Int64,Int64), Int64>, ICallable
    {
        public LoopedWalk(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "LoopedWalk";
        String ICallable.FullName => "CircleTest.LoopedWalk";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__S
        {
            get;
            set;
        }

        protected ICallable<(Qubit,IQArray<Qubit>), QVoid> Mutation__
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> Microsoft__Quantum__Intrinsic__M
        {
            get;
            set;
        }

        protected ICallable<Qubit, QVoid> Reset__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Result>, Int64> Microsoft__Quantum__Convert__ResultArrayAsInt
        {
            get;
            set;
        }

        public override Func<(Int64,Int64), Int64> __Body__ => (__in__) =>
        {
            var (N,iterations) = __in__;
#line hidden
            {
#line 34 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                var state = Allocate__.Apply(N);
#line hidden
                bool __arg1__ = true;
                try
                {
#line hidden
                    {
#line 35 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                        var coin = Allocate__.Apply();
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 36 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                            Microsoft__Quantum__Intrinsic__H.Apply(coin);
#line 37 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                            Microsoft__Quantum__Intrinsic__S.Apply(coin);
#line 39 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                            foreach (var i in new QRange(1L, iterations))
#line hidden
                            {
#line 40 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                                Mutation__.Apply((coin, state));
                            }

#line 44 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                            var resultArray = new QArray<Result>();
#line 45 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                            foreach (var qubit in state)
#line hidden
                            {
#line 46 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                                resultArray = QArray<Result>.Add(resultArray, new QArray<Result>(Microsoft__Quantum__Intrinsic__M.Apply(qubit)));
                            }

#line 48 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                            Reset__.Apply(coin);
#line 49 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                            return Microsoft__Quantum__Convert__ResultArrayAsInt.Apply(resultArray?.Copy());
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(coin);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(state);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__S = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.S));
            this.Mutation__ = this.__Factory__.Get<ICallable<(Qubit,IQArray<Qubit>), QVoid>>(typeof(Mutation));
            this.Microsoft__Quantum__Intrinsic__M = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Intrinsic.M));
            this.Reset__ = this.__Factory__.Get<ICallable<Qubit, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Reset));
            this.Microsoft__Quantum__Convert__ResultArrayAsInt = this.__Factory__.Get<ICallable<IQArray<Result>, Int64>>(typeof(global::Microsoft.Quantum.Convert.ResultArrayAsInt));
        }

        public override IApplyData __DataIn__((Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, Int64 N, Int64 iterations)
        {
            return __m__.Run<LoopedWalk, (Int64,Int64), Int64>((N, iterations));
        }
    }

    [SourceLocation("D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs", OperationFunctor.Body, 53, 66)]
    public partial class LeftShifts : Operation<(Int64,Int64), Int64>, ICallable
    {
        public LeftShifts(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "LeftShifts";
        String ICallable.FullName => "CircleTest.LeftShifts";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Increment__
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> Microsoft__Quantum__Intrinsic__M
        {
            get;
            set;
        }

        protected ICallable<IQArray<Result>, Int64> Microsoft__Quantum__Convert__ResultArrayAsInt
        {
            get;
            set;
        }

        public override Func<(Int64,Int64), Int64> __Body__ => (__in__) =>
        {
            var (N,shifts) = __in__;
#line hidden
            {
#line 54 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                var state = Allocate__.Apply(N);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 55 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                    foreach (var i in new QRange(1L, shifts))
#line hidden
                    {
#line 56 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                        Increment__.Adjoint.Apply(state);
                    }

#line 59 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                    var resultArray = new QArray<Result>();
#line 60 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                    foreach (var qubit in state)
#line hidden
                    {
#line 61 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                        resultArray = QArray<Result>.Add(resultArray, new QArray<Result>(Microsoft__Quantum__Intrinsic__M.Apply(qubit)));
                    }

#line 63 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                    return Microsoft__Quantum__Convert__ResultArrayAsInt.Apply(resultArray?.Copy());
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(state);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Increment__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(Increment));
            this.Microsoft__Quantum__Intrinsic__M = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Intrinsic.M));
            this.Microsoft__Quantum__Convert__ResultArrayAsInt = this.__Factory__.Get<ICallable<IQArray<Result>, Int64>>(typeof(global::Microsoft.Quantum.Convert.ResultArrayAsInt));
        }

        public override IApplyData __DataIn__((Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, Int64 N, Int64 shifts)
        {
            return __m__.Run<LeftShifts, (Int64,Int64), Int64>((N, shifts));
        }
    }

    [SourceLocation("D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs", OperationFunctor.Body, 66, -1)]
    public partial class RightShifts : Operation<(Int64,Int64), Int64>, ICallable
    {
        public RightShifts(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "RightShifts";
        String ICallable.FullName => "CircleTest.RightShifts";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Increment__
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> Microsoft__Quantum__Intrinsic__M
        {
            get;
            set;
        }

        protected ICallable<IQArray<Result>, Int64> Microsoft__Quantum__Convert__ResultArrayAsInt
        {
            get;
            set;
        }

        public override Func<(Int64,Int64), Int64> __Body__ => (__in__) =>
        {
            var (N,shifts) = __in__;
#line hidden
            {
#line 67 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                var state = Allocate__.Apply(N);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 68 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                    foreach (var i in new QRange(1L, shifts))
#line hidden
                    {
#line 69 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                        Increment__.Apply(state);
                    }

#line 72 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                    var resultArray = new QArray<Result>();
#line 73 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                    foreach (var qubit in state)
#line hidden
                    {
#line 74 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                        resultArray = QArray<Result>.Add(resultArray, new QArray<Result>(Microsoft__Quantum__Intrinsic__M.Apply(qubit)));
                    }

#line 76 "D:\\BWSI\\quantum-walks\\Q#\\QuantumWalks\\circleTest\\dummy.qs"
                    return Microsoft__Quantum__Convert__ResultArrayAsInt.Apply(resultArray?.Copy());
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(state);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Increment__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(Increment));
            this.Microsoft__Quantum__Intrinsic__M = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Intrinsic.M));
            this.Microsoft__Quantum__Convert__ResultArrayAsInt = this.__Factory__.Get<ICallable<IQArray<Result>, Int64>>(typeof(global::Microsoft.Quantum.Convert.ResultArrayAsInt));
        }

        public override IApplyData __DataIn__((Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, Int64 N, Int64 shifts)
        {
            return __m__.Run<RightShifts, (Int64,Int64), Int64>((N, shifts));
        }
    }
}