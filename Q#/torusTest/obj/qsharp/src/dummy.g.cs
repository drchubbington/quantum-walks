//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"DummyQS\",\"Name\":\"Mutation\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs\",\"Position\":{\"Item1\":8,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":19}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"coin\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":20},\"Item2\":{\"Line\":1,\"Column\":24}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"stateX\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":35},\"Item2\":{\"Line\":1,\"Column\":41}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"stateY\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":52},\"Item2\":{\"Line\":1,\"Column\":58}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"DummyQS\",\"Name\":\"Mutation\"},\"Attributes\":[],\"SourceFile\":\"/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs\",\"Position\":{\"Item1\":8,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"DummyQS\",\"Name\":\"Increment\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs\",\"Position\":{\"Item1\":20,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":21},\"Item2\":{\"Line\":1,\"Column\":29}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"DummyQS\",\"Name\":\"Increment\"},\"Attributes\":[],\"SourceFile\":\"/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs\",\"Position\":{\"Item1\":20,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"DummyQS\",\"Name\":\"Increment\"},\"Attributes\":[],\"SourceFile\":\"/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs\",\"Position\":{\"Item1\":20,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":50},\"Item2\":{\"Line\":1,\"Column\":59}},\"Documentation\":[\"automatically generated QsAdjoint specialization for DummyQS.Increment\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"DummyQS\",\"Name\":\"Increment\"},\"Attributes\":[],\"SourceFile\":\"/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs\",\"Position\":{\"Item1\":20,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":50},\"Item2\":{\"Line\":1,\"Column\":59}},\"Documentation\":[\"automatically generated QsControlled specialization for DummyQS.Increment\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"DummyQS\",\"Name\":\"Increment\"},\"Attributes\":[],\"SourceFile\":\"/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs\",\"Position\":{\"Item1\":20,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":50},\"Item2\":{\"Line\":1,\"Column\":59}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for DummyQS.Increment\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"DummyQS\",\"Name\":\"Decrement\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs\",\"Position\":{\"Item1\":27,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":21},\"Item2\":{\"Line\":1,\"Column\":29}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"DummyQS\",\"Name\":\"Decrement\"},\"Attributes\":[],\"SourceFile\":\"/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs\",\"Position\":{\"Item1\":27,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"DummyQS\",\"Name\":\"Decrement\"},\"Attributes\":[],\"SourceFile\":\"/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs\",\"Position\":{\"Item1\":27,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":50},\"Item2\":{\"Line\":1,\"Column\":59}},\"Documentation\":[\"automatically generated QsAdjoint specialization for DummyQS.Decrement\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"DummyQS\",\"Name\":\"Decrement\"},\"Attributes\":[],\"SourceFile\":\"/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs\",\"Position\":{\"Item1\":27,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":50},\"Item2\":{\"Line\":1,\"Column\":59}},\"Documentation\":[\"automatically generated QsControlled specialization for DummyQS.Decrement\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"DummyQS\",\"Name\":\"Decrement\"},\"Attributes\":[],\"SourceFile\":\"/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs\",\"Position\":{\"Item1\":27,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":50},\"Item2\":{\"Line\":1,\"Column\":59}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for DummyQS.Decrement\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"DummyQS\",\"Name\":\"Flip\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs\",\"Position\":{\"Item1\":31,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":15}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"coin\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":16},\"Item2\":{\"Line\":1,\"Column\":20}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Qubit\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"DummyQS\",\"Name\":\"Flip\"},\"Attributes\":[],\"SourceFile\":\"/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs\",\"Position\":{\"Item1\":31,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":15}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"DummyQS\",\"Name\":\"LoopedWalk\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs\",\"Position\":{\"Item1\":35,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"length\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":28}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"height\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":35},\"Item2\":{\"Line\":1,\"Column\":41}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"iterations\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":48},\"Item2\":{\"Line\":1,\"Column\":58}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"DummyQS\",\"Name\":\"LoopedWalk\"},\"Attributes\":[],\"SourceFile\":\"/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs\",\"Position\":{\"Item1\":35,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"Documentation\":[]}")]
#line hidden
namespace DummyQS
{
    [SourceLocation("/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs", OperationFunctor.Body, 9, 21)]
    public partial class Mutation : Operation<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid>, ICallable
    {
        public Mutation(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "Mutation";
        String ICallable.FullName => "DummyQS.Mutation";
        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected ICallable<Qubit, QVoid> Flip__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Increment__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Decrement__
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid> __Body__ => (__in__) =>
        {
            var (coin,stateX,stateY) = __in__;
#line 10 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
            Microsoft__Quantum__Canon__ApplyToEach.Apply((Flip__, coin));
#line 11 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
            Increment__.Controlled.Apply((coin, stateX));
#line 12 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(coin[0L]);
#line 13 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
            Decrement__.Controlled.Apply((coin, stateX));
#line 14 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(coin[1L]);
#line 15 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
            Increment__.Controlled.Apply((coin, stateY));
#line 16 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(coin[0L]);
#line 17 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
            Decrement__.Controlled.Apply((coin, stateY));
#line 18 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(coin[1L]);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Flip__ = this.__Factory__.Get<ICallable<Qubit, QVoid>>(typeof(Flip));
            this.Increment__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(Increment));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Decrement__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(Decrement));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> coin, IQArray<Qubit> stateX, IQArray<Qubit> stateY)
        {
            return __m__.Run<Mutation, (IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid>((coin, stateX, stateY));
        }
    }

    [SourceLocation("/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs", OperationFunctor.Body, 21, 28)]
    [SourceLocation("/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs", OperationFunctor.Adjoint, 21, 28)]
    [SourceLocation("/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs", OperationFunctor.Controlled, 21, 28)]
    [SourceLocation("/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs", OperationFunctor.ControlledAdjoint, 21, 28)]
    public partial class Increment : Unitary<IQArray<Qubit>>, ICallable
    {
        public Increment(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Increment";
        String ICallable.FullName => "DummyQS.Increment";
        protected ICallable Length__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse__
        {
            get;
            set;
        }

        public override Func<IQArray<Qubit>, QVoid> __Body__ => (__in__) =>
        {
            var register = __in__;
#line 22 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
            foreach (var i in new QRange((register.Length - 1L), -(1L), 1L))
#line hidden
            {
#line 23 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
                Microsoft__Quantum__Intrinsic__X.Controlled.Apply((register.Slice(new QRange((i - 1L), -(1L), 0L)), register[i]));
            }

#line 25 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(register[0L]);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<IQArray<Qubit>, QVoid> __AdjointBody__ => (__in__) =>
        {
            var register = __in__;
#line 21 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
            Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(register[0L]);
#line 21 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
            foreach (var __qsVar0__i__ in RangeReverse__.Apply(new QRange((register.Length - 1L), -(1L), 1L)))
#line hidden
            {
#line 21 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
                Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Apply((register.Slice(new QRange((__qsVar0__i__ - 1L), -(1L), 0L)), register[__qsVar0__i__]));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,register) = __in__;
#line 21 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
            foreach (var i in new QRange((register.Length - 1L), -(1L), 1L))
#line hidden
            {
#line 21 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
                Microsoft__Quantum__Intrinsic__X.Controlled.Controlled.Apply((__controlQubits__, (register.Slice(new QRange((i - 1L), -(1L), 0L)), register[i])));
            }

#line 21 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Apply((__controlQubits__, register[0L]));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,register) = __in__;
#line 21 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
            Microsoft__Quantum__Intrinsic__X.Adjoint.Controlled.Apply((__controlQubits__, register[0L]));
#line 21 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
            foreach (var __qsVar0__i__ in RangeReverse__.Apply(new QRange((register.Length - 1L), -(1L), 1L)))
#line hidden
            {
#line 21 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
                Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (register.Slice(new QRange((__qsVar0__i__ - 1L), -(1L), 0L)), register[__qsVar0__i__])));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.RangeReverse__ = this.__Factory__.Get<ICallable<QRange, QRange>>(typeof(global::Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __DataIn__(IQArray<Qubit> data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> register)
        {
            return __m__.Run<Increment, IQArray<Qubit>, QVoid>(register);
        }
    }

    [SourceLocation("/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs", OperationFunctor.Body, 28, 32)]
    [SourceLocation("/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs", OperationFunctor.Adjoint, 28, 32)]
    [SourceLocation("/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs", OperationFunctor.Controlled, 28, 32)]
    [SourceLocation("/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs", OperationFunctor.ControlledAdjoint, 28, 32)]
    public partial class Decrement : Unitary<IQArray<Qubit>>, ICallable
    {
        public Decrement(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Decrement";
        String ICallable.FullName => "DummyQS.Decrement";
        protected IUnitary<IQArray<Qubit>> Increment__
        {
            get;
            set;
        }

        public override Func<IQArray<Qubit>, QVoid> __Body__ => (__in__) =>
        {
            var register = __in__;
#line 29 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
            Increment__.Adjoint.Apply(register);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<IQArray<Qubit>, QVoid> __AdjointBody__ => (__in__) =>
        {
            var register = __in__;
#line 28 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
            Increment__.Adjoint.Adjoint.Apply(register);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,register) = __in__;
#line 28 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
            Increment__.Adjoint.Controlled.Apply((__controlQubits__, register));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,register) = __in__;
#line 28 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
            Increment__.Adjoint.Adjoint.Controlled.Apply((__controlQubits__, register));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Increment__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(Increment));
        }

        public override IApplyData __DataIn__(IQArray<Qubit> data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> register)
        {
            return __m__.Run<Decrement, IQArray<Qubit>, QVoid>(register);
        }
    }

    [SourceLocation("/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs", OperationFunctor.Body, 32, 36)]
    public partial class Flip : Operation<Qubit, QVoid>, ICallable
    {
        public Flip(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Flip";
        String ICallable.FullName => "DummyQS.Flip";
        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        public override Func<Qubit, QVoid> __Body__ => (__in__) =>
        {
            var coin = __in__;
#line 33 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
            Microsoft__Quantum__Intrinsic__H.Apply(coin);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
        }

        public override IApplyData __DataIn__(Qubit data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Qubit coin)
        {
            return __m__.Run<Flip, Qubit, QVoid>(coin);
        }
    }

    [SourceLocation("/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs", OperationFunctor.Body, 36, -1)]
    public partial class LoopedWalk : Operation<(Int64,Int64,Int64), IQArray<Int64>>, ICallable
    {
        public LoopedWalk(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "LoopedWalk";
        String ICallable.FullName => "DummyQS.LoopedWalk";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__S
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid> Mutation__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> Microsoft__Quantum__Intrinsic__M
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,Int64), IQArray<Int64>> __Body__ => (__in__) =>
        {
            var (length,height,iterations) = __in__;
#line hidden
            {
#line 41 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
                var stateX = Allocate__.Apply(length);
#line hidden
                bool __arg1__ = true;
                try
                {
#line hidden
                    {
#line 42 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
                        var stateY = Allocate__.Apply(height);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line hidden
                            {
#line 45 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
                                var fourWayCoin = Allocate__.Apply(2L);
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line 47 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
                                    Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, fourWayCoin));
#line 48 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
                                    Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__S, fourWayCoin));
#line 51 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
                                    foreach (var i in new QRange(1L, iterations))
#line hidden
                                    {
#line 52 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
                                        Mutation__.Apply((fourWayCoin, stateX, stateY));
                                    }

#line 55 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
                                    ResetAll__.Apply(fourWayCoin);
#line 58 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
                                    var resultX = 0L;
#line 59 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
                                    foreach (var i in new QRange((length - 1L), -(1L), 0L))
#line hidden
                                    {
#line 60 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
                                        resultX = (resultX + (2L.Pow(i) * ((Microsoft__Quantum__Intrinsic__M.Apply(stateX[i]) == Result.One) ? 1L : 0L)));
                                    }

#line 64 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
                                    var resultY = 0L;
#line 65 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
                                    foreach (var i in new QRange((height - 1L), -(1L), 0L))
#line hidden
                                    {
#line 66 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
                                        resultY = (resultY + (2L.Pow(i) * ((Microsoft__Quantum__Intrinsic__M.Apply(stateY[i]) == Result.One) ? 1L : 0L)));
                                    }

#line 69 "/Users/2019omatheson/Documents/GitHub/quantum-walks/Q#/torusTest/dummy.qs"
                                    return new QArray<Int64>(resultX, resultY);
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(fourWayCoin);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(stateY);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(stateX);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__S = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.S));
            this.Mutation__ = this.__Factory__.Get<ICallable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid>>(typeof(Mutation));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
            this.Microsoft__Quantum__Intrinsic__M = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Intrinsic.M));
        }

        public override IApplyData __DataIn__((Int64,Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__(IQArray<Int64> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Int64>> Run(IOperationFactory __m__, Int64 length, Int64 height, Int64 iterations)
        {
            return __m__.Run<LoopedWalk, (Int64,Int64,Int64), IQArray<Int64>>((length, height, iterations));
        }
    }
}